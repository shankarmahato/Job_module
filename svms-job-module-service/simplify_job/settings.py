"""
Django settings for simplifyai_job project.

Generated by 'django-admin startproject' using Django 3.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import redis
from apscheduler.schedulers.background import BackgroundScheduler
import mimetypes
import logging.config
import yaml
import os
import sys
import json
from .aws_secret_key_manager import get_secret
from cachetools import TTLCache
from aws_xray_sdk.core import patch
import requests

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Get App name from the system environment
APP_NAME = os.environ.get('BUILD_ENV', "local")

APPEND_SLASH = False

# loading configuration from settings.yaml file
SETTINGS_YML_FILE = os.path.join(os.path.dirname(
    os.path.abspath(__file__)), 'settings.yaml')

with open(SETTINGS_YML_FILE, 'r') as f:
    config_contents = yaml.load(f, Loader=yaml.FullLoader)
    CONFIG = config_contents["default"]
    CONFIG.update(config_contents[APP_NAME])

REGION_NAME = os.environ.get('REGION', "ap-south-1")
SECRET_NAME = os.environ.get('SECRET_NAME', "wipro-uat/job")

if APP_NAME != 'local':

    # get secret from the aws secret managers
    # secret_var = get_secret(CONFIG["AWS"]["AWS_SECRET_NAME"], CONFIG["AWS"]["AWS_REGION"])
    secret_var = get_secret(SECRET_NAME, REGION_NAME)
    secret_var = json.loads(secret_var)
    CONFIG.update(secret_var)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = CONFIG["SECRET_KEY"]
VENDOR_ENDPOINT = CONFIG['CONFIGURATOR_BASE_URL']

AUTH_TOKEN_ENDPOINT = CONFIG['AUTH_TOKEN_ENDPOINT']
AUTH_TOKEN_USERNAME = CONFIG['AUTH_TOKEN_USERNAME']
AUTH_TOKEN_PASSWORD = CONFIG['AUTH_TOKEN_PASSWORD']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = CONFIG["DEBUG"]

ALLOWED_HOSTS = CONFIG["ALLOWED_HOSTS"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'simple_history',
    'drf_yasg',
    'corsheaders',
    'job',
    'job_catalog',
    'rate_card',
    'job_distribution',
    'aws_xray_sdk.ext.django',
    'rangefilter',

]

INSTALLED_APPS += [
    'django_extensions',
    'django_filters',
    'healthcheck',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'aws_xray_sdk.ext.django.middleware.XRayMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',

    # 'django.middleware.cache.UpdateCacheMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.contrib.sessions.middleware.SessionMiddleware',
    # 'django.middleware.cache.FetchFromCacheMiddleware',

    # 'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware'
]

ROOT_URLCONF = 'simplify_job.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'simplify_job.wsgi.application'

CORS_ORIGIN_ALLOW_ALL = True
# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
DATABASES = CONFIG["DATABASES"]

# get secret from the aws secret managers


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = CONFIG["LANGUAGE_CODE"]

TIME_ZONE = CONFIG["TIME_ZONE"]

USE_I18N = CONFIG["USE_I18N"]

USE_L10N = CONFIG["USE_L10N"]

USE_TZ = CONFIG["USE_TZ"]

PROFILE_API = CONFIG["PROFILE_BASE_URL"]

# STOMP Configurations
NOTIFICATION_API = CONFIG["NOTIFICATION_API"]
APPROVAL_WORKFLOW = CONFIG["APPROVAL_WORKFLOW"]
CONFIGURATOR_BASE_URL = CONFIG["CONFIGURATOR_BASE_URL"]
PROFILE_BASE_URL = CONFIG["PROFILE_BASE_URL"]
APPROVAL_LIST = CONFIG["APPROVAL_LIST"]
VMS_DASHBOARD = CONFIG["VMS_DASHBOARD"]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

mimetypes.add_type("text/css", ".css", True)

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')


REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 25,
    'PAGINATION_MAX_PAGE_SIZE': 1000,
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter'
    ]
}


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '%(levelname)-1s: %(asctime)s\
                      [%(name)-12s.%(funcName)s] %(message)s',
        },
        'file': {
            'format': '%(levelname)-1s: %(asctime)s\
                      [%(name)-12s.%(funcName)s] %(message)s',
        },
    },
    'handlers': {
        'console': {
            'level': CONFIG["LOGGING"]["HANDLERS_CONSOLE_LEVEL"],
            'class': 'logging.StreamHandler',
            'formatter': 'console',
            'stream': sys.stdout
        },
        'file': {
            'level': CONFIG["LOGGING"]["HANDLERS_CONSOLE_LEVEL"],
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'file',
            'filename': 'approval_logs.log',
        },
    },
    'loggers': {
        '': {
            'handlers': [CONFIG['LOGGING_HANDLER']],
            'level': CONFIG["LOGGING"]["LOGGERS_DEFAULT_LEVEL"],
            'propagate': True
        },
        "lml": {"handlers": ["console"], "level": "ERROR"},
        "pyexcel": {"handlers": ["console"], "level": "ERROR"},
        "pyexcel_io": {"handlers": ["console"], "level": "ERROR"},
        "botocore": {"handlers": ["console"], "level": "ERROR"},
        "asyncio": {"handlers": ["console"], "level": "ERROR"},
        # "aws_xray_sdk": {"handlers": ["console"], "level": "ERROR"},
        "django": {"handlers": ["console"], "level": "ERROR"},
    }
}

logging.config.dictConfig(LOGGING)
LOGGER = logging.getLogger(__name__)

GOOGLE_MAP_API_KEY = CONFIG['GOOGLE_MAP_API_KEY']
LOGGER.info('Init local Cache engine: TTLCache')
TTLCACHE = TTLCache(maxsize=500, ttl=60)

# App Sceduler setting
SCHED = BackgroundScheduler()
SCHED.start()

WORK_LOCATION = CONFIG["URLS"]["WORK_LOCATION"]
HIERARCHY = CONFIG["URLS"]["HIERARCHY"]
APPROVAL = CONFIG["URLS"]["APPROVAL"]
QUALIFICATION = CONFIG["URLS"]["QUALIFICATION"]
GET_ROLE = CONFIG["URLS"]["GET_ROLE"]
CHECKLIST = CONFIG["URLS"]["CHECKLIST"]
GET_CANDIDATES = CONFIG["URLS"]["GET_CANDIDATES"]
GET_PROGRAM = CONFIG["URLS"]["GET_PROGRAM"]
AUTH_VALIDATE = CONFIG["URLS"]["AUTH_VALIDATE"]
GET_USER = CONFIG["URLS"]["GET_USER"]
CREATE_USER = CONFIG["URLS"]["CREATE_USER"]
UPDATE_USER = CONFIG["URLS"]["UPDATE_USER"]
TERM_OF_SERVICE = CONFIG["URLS"]["TERM_OF_SERVICE"]
GET_PROGRAM_NAME = CONFIG["URLS"]["GET_PROGRAM_NAME"]
VMS_JOB_MODULE = CONFIG["URLS"]["VMS_JOB_MODULE"]
VMS_JOB_MODULE_PING = CONFIG["URLS"]["VMS_JOB_MODULE_PING"]
VMS_JOB_MODULE_JOBS = CONFIG["URLS"]["VMS_JOB_MODULE_JOBS"]
SUBMIT_CANDIDATES = CONFIG["URLS"]["SUBMIT_CANDIDATES"]
GET_JOB_CANDIDATES = CONFIG["URLS"]["GET_JOB_CANDIDATES"]
GET_VENDOR_SUBMITTED_CANDIDATES = CONFIG["URLS"]["GET_VENDOR_SUBMITTED_CANDIDATES"]
FOUNDATION_DATA = CONFIG["URLS"]["FOUNDATION_DATA"]
VALIDATE_CHECKLIST = CONFIG["URLS"]["VALIDATE_CHECKLIST"]
POST_CANDIDATES = CONFIG["URLS"]["POST_CANDIDATES"]
GET_VENDORS_BASED_ON_GROUP_ID = CONFIG["URLS"]["GET_VENDORS_BASED_ON_GROUP_ID"]
GET_VENDOR_DETAIL = CONFIG["URLS"]["GET_VENDOR_DETAIL"]
GET_VENDORS = CONFIG["URLS"]["GET_VENDORS"]
# Redis Keys
REDIS_JOB_KEY = CONFIG["REDIS_JOB_KEY"]
USERS_KEY = CONFIG["REDIS_OTHER_SERVICES"]["USERS_KEY"]
WORK_LOCATION_KEY = CONFIG["REDIS_OTHER_SERVICES"]["WORK_LOCATION_KEY"]
HIERARCHY_KEY = CONFIG["REDIS_OTHER_SERVICES"]["HIERARCHY_KEY"]
QUALIFICATION_KEY = CONFIG["REDIS_OTHER_SERVICES"]["QUALIFICATION_KEY"]
FOUNDATIONAL_KEY = CONFIG["REDIS_OTHER_SERVICES"]["FOUNDATIONAL_KEY"]
PROGRAM_KEY = CONFIG["REDIS_OTHER_SERVICES"]["PROGRAM_KEY"]
TOKEN_KEY = CONFIG["REDIS_OTHER_SERVICES"]["TOKEN_KEY"]


'''
Redis Configuration
'''

CACHE_TTL = 60 * 15

# Redis Configration
if APP_NAME != 'local':

    REDIS_CACHE = {
        'HOST': CONFIG["REDIS"]["host"],
        'PORT': CONFIG["REDIS"]["port"],
        'PASSWORD': CONFIG["REDIS"]["password"]
    }
else:
    REDIS_CACHE = {
        'HOST': CONFIG["REDIS"]["host"],
        'PORT': CONFIG["REDIS"]["port"]
    }

LOGGER.info('Init Cache engine connection: Redis')

if 'PASSWORD' in REDIS_CACHE:
    REDIS_STORE = redis.Redis(host=REDIS_CACHE['HOST'],
                              port=int(REDIS_CACHE['PORT']),
                              password=REDIS_CACHE['PASSWORD'],
                              ssl=True)
else:
    REDIS_STORE = redis.Redis(host=REDIS_CACHE['HOST'],
                              port=int(REDIS_CACHE['PORT']))



patch(["requests"])
XRAY_RECORDER = {
    'AUTO_INSTRUMENT': CONFIG["XRAY"]["AUTO_INSTRUMENT"],
    'AWS_XRAY_CONTEXT_MISSING': CONFIG["XRAY"]["AWS_XRAY_CONTEXT_MISSING"],
    'AWS_XRAY_DAEMON_ADDRESS': CONFIG["XRAY"]["AWS_XRAY_DAEMON_ADDRESS"],
    'AWS_XRAY_TRACING_NAME': CONFIG["XRAY"]["AWS_XRAY_TRACING_NAME"],
    'PLUGINS': (CONFIG["XRAY"]["PLUGINS"]["PLUGIN1"], CONFIG["XRAY"]["PLUGINS"]["PLUGIN2"], CONFIG["XRAY"]["PLUGINS"]["PLUGIN3"]),
    'SAMPLING': CONFIG["XRAY"]["SAMPLING"],
    'AWS_XRAY_SDK_ENABLED': CONFIG["XRAY"]["AWS_XRAY_SDK_ENABLED"]
}


CONNECTIVITY = CONFIG["CONNECTIVITY"]
RESPONSE_TIMEOUT = CONFIG["RESPONSE_TIMEOUT"]
